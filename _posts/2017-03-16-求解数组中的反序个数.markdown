---
layout: post
title: "求解数组中的反序个数"
author: '#1121'
date: 2017-03-16 22:57:53 +0800
categories: [分治法]
---

怒水一发，来自算法课的作业。

对于数组A[1:n]，如果i<j并且A[i]>A[j]，则称数对(A[i],A[j])是该数组的一个反序。反序的个数可以用来衡量一个数组的无序程度。

例如，A=[3,5,2,4]，则该数组中存在3个反序(3,2)，(5,2)，(5,4)。作业的内容就是设计一个时间复杂度严格低于n²的分治算法来求解数组中反序的个数。

## 思路

由于要设计的是分治算法，肯定是要将问题分解为子问题并递归求解，分解到何时呢？显然，当问题的规模为1时反序的个数为0，当问题的规模为2时，若第一个元素大于第二个元素则反序个数为1，否则为0。在这里将数组等分为两部分，对左右两个子数组递归求解。时间复杂度严格低于n²，主要考量的是merge阶段，我们已经分别求出了两个子数组中的反序个数，那么接下来要求的便是两个子数组中各有一个元素的反序的个数，将左右两个子数组分别按升序排序，各取左右两个数组中的一个数a和b进行比较，若a>b，那么显然(a,b)是一个反序，同时左边数组中a右边的元素均大于a，因此a右边的每一个元素都与b构成了一个反序，这样我们便找出了对应于b的所有反序，接着取右边数组中b的下一个元素进行下一轮判断即可；若a<b，那么a也小于右边数组中b右边的所有元素，因此a不可能再构成任何反序，接着取左边数组中a的下一个元素进行下一轮判断即可。

## 代码

{% highlight bash linenos %}
def count_reverse(a, left, right):
    if left == right:
        return 0
    elif left == right - 1:
        return 1 if a[left] > a[right] else 0
    else:
        mid = (left + right) // 2

        count_left = count_reverse(a, left, mid)
        count_right = count_reverse(a, mid + 1, right)

        count_all = count_left + count_right

        sorted_left = sorted(a[left:mid + 1])
        sorted_right = sorted(a[mid + 1:right + 1])

        i = 0
        j = 0
        while i < len(sorted_left) and j < len(sorted_right):
            if sorted_left[i] > sorted_right[j]:
                count_all += (len(sorted_left) - i)
                j += 1
            else:
                i += 1
        return count_all
{% endhighlight %}

## 时间复杂度

merge阶段分为两个部分，首先是将两个子数组进行排序，这部分的时间复杂度为𝚶(nlogn)，然后是寻找由两个子数组的元素构成的反序，这部分的时间复杂度为𝚶(n)。那么，整个merge阶段的时间复杂度就是𝚶(nlogn)

最后建立的递归方程为：

> T(n) = 2T(n/2) + nlogn

根据Master定理很容易可以求出该算法的时间复杂度为𝚹(nlogn)，满足时间复杂度严格低于n²的要求。